# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ShpFileCorrector
                                 A QGIS plugin
 This will correct the boundary of shp files
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-09-22
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Vanshika
        email                : vanshikav.kumar@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import sys
import typing
from typing import Optional, Collection

if os.path.join(os.path.dirname(__file__) + '/lib') not in sys.path:
    sys.path.insert(0, os.path.join(os.path.dirname(__file__) + '/lib'))

import networkx as nx


from qgis.PyQt.QtCore import QSettings,Qt, QVariant, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QFileDialog, QToolBar, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ShpFileCorrector_dialog import ShpFileCorrectorDialog
import os.path

import processing, tempfile
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from qgis.core import  QgsProject, QgsCoordinateReferenceSystem, QgsLayerTree, QgsLayerTreeNode, QgsPointXY, QgsVectorLayer, \
    QgsRasterLayer, QgsMapLayer, QgsWkbTypes, QgsVectorFileWriter, QgsCoordinateTransform, QgsField, QgsDefaultValue, QgsRectangle, QgsFeatureIterator, \
    QgsFeature, QgsGeometry, QgsTolerance, QgsMapSettings, QgsUnitTypes,QgsFeatureRequest,QgsAbstractGeometry,QgsPoint
from qgis.gui import QgisInterface, QgsMapTool, QgsRubberBand
from qgis.PyQt.QtGui import QColor
from qgis.utils import iface
from qgis.utils import *
import qgis

from . import utils
from .utils import PLUGIN_DIR, APP_NAME, SelectionModes, processing_cursor, __, show_info, get_group, reproject


BOUNDARY_ATTR_NAME = 'boundary'
PRECALCULATE_METRIC_CLOSURES = False
DEFAULT_SELECTION_MODE = SelectionModes.ENCLOSING
MODE_VERTICES_EXTENT_LIMIT = 300
MODE_VERTICES_LIMIT = 1000

SelectBehaviour = int

class ShpFileCorrector:
    """QGIS Plugin Implementation."""
    l=[]
    layersList=[]
    currentLayer=''
    currentFeature=''
    finalFile=''
    fList=[]
    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.project=QgsProject.instance()
        self.layerTree=self.project.layerTreeRoot()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ShpFileCorrector_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.baseRasterLayerName= __('Base')
        self.segmentsLayerName = __('Segments')
        self.simplifiedSegmentsLayerName = __('Simplified Segments')
        self.verticesLayerName = __('Vertices')
        self.candidatesLayerName = __('Candidates')
        self.finalLayerName = __('Final')
        self.groupName = __('ShpFileCorrector')
        self.baseRasterLayer: Optional[QgsRasterLayer] = None
        self.segmentsLayer: Optional[QgsVectorLayer] = None
        self.simplifiedSegmentsLayer: Optional[QgsVectorLayer] = None
        self.verticesLayer: Optional[QgsVectorLayer] = None
        self.candidatesLayerLine: Optional[QgsVectorLayer] = None
        self.candidatesLayerPoint: Optional[QgsVectorLayer] = None
        self.candidatesLayerPoly: Optional[QgsVectorLayer] = None
        self.finalLayerLine: Optional[QgsVectorLayer] = None
        self.finalLayerPoint: Optional[QgsVectorLayer] = None
        self.finalLayerPolygons: Optional[QgsVectorLayer] = None



        mFillColor = QColor(254, 178, 76, 63)
        self.canvas = self.iface.mapCanvas()
        self.active = True
        self.rubberBand = QgsRubberBand(self.canvas, QgsWkbTypes.PolygonGeometry)
        self.rubberBand.setColor(mFillColor)
        self.rubberBand.setWidth(1)
        self.reset()

        self.actions: typing.List[QAction]  = []
        self.canvas = self.iface.mapCanvas()

        self.isMapSelectionToolEnabled = False
        self.isEditCandidatesToggled = False
        self.shouldAddLengthAttribute = False
        self.wasBaseRasterLayerInitiallyInLegend = True
        self.wasSegmentsLayerInitiallyInLegend = True
        self.previousMapTool = None
        self.selectionMode = SelectionModes.NONE
        self.previousSelectionMode = SelectionModes.NONE
        self.lengthAttributeName = 'BD_LEN'
        self.metricClosureGraphs: typing.Dict[str, typing.Any] = {}
        self.graph: Optional[nx.MultiGraph] = None
        self.subgraphs: Optional[Collection[nx.Graph]] = None
        self.simplifiedSegmentsNumericFields: Optional[typing.Dict[str, typing.Any]] = None

        iface.mainWindow().findChild(QToolBar, 'mDigitizeToolBar').setVisible(True)
        iface.mainWindow().findChild(QToolBar, 'mAdvancedDigitizeToolBar').setVisible(True)
        iface.mainWindow().findChild(QToolBar, 'mSnappingToolBar').setVisible(True)
        snappingConfig = self.canvas.snappingUtils().config()
        snappingConfig.setEnabled(True)

        self.canvas.snappingUtils().setConfig(snappingConfig)
        self.menu = self.tr(u'&ShpFileCorrector')
        QSettings().setValue('/Projections/defaultBehaviour', 'useProject')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        
        return QCoreApplication.translate('ShpFileCorrector', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
      
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action



    def create_Final_layer(self):
    	crs=self.__getCrs(self.currentLayer)
    	if(os.path.isfile(self.finalFile)):
    		finalLayerLine=QgsVectorLayer(self.finalLayerName,'org')
    	else:
    		finalLayerLine=QgsVectorLayer('MultiLineString?crs=%s'%crs.authid(),self.finalLayerName,'memory')
    		finalLayerPoly=QgsVectorLayer('Polygon?crs=%s'%crs.authid(),self.finalLayerName,'memory')
    		finalLayerPoint=QgsVectorLayer('Point?crs=%s'%crs.authid(),self.finalLayerName,'memory')
    		finalLayerLine.dataProvider().addAttributes([QgsField('FID',QVariant.Int)])
    		finalLayerLine.updateFields()
    		finalLayerLine.updateExtents()
    		if(self.finalFile):
    			(writeErrorCode,writeErrorMsg)=QgsVectorFileWriter.writeAsVectorFormat(finalLayer,self.finalFile,'utf-8',crs,'ESRI Shapefile')
    			if(writeErrorMsg):
    				show_info('[%s] %s',(writeErrorCode,writeErrorMsg))
    			finalLayerLine=QgsVectorLayer(self.finalFile,self.finalLayerName,'org')
    	return (finalLayerLine,finalLayerPoint,finalLayerPoly)
    def create_Candidate_Layer(self):

    	crs=self.__getCrs(self.currentLayer).authid()
    	candidatesLayerLine=QgsVectorLayer('MultiLineString?crs=%s' %crs,self.candidatesLayerName,'memory')
    	candidatesLayerPoly=QgsVectorLayer('Polygon?crs=%s' %crs,self.candidatesLayerName,'memory')
    	candidatesLayerPoint=QgsVectorLayer('Point?crs=%s' %crs,self.candidatesLayerName,'memory')
    	finalLayer=self.create_Final_layer()
    	layerTreeIndex = utils.get_tree_node_index(self.currentLayer)

    	#self.dlg.featureDetails.setText(str(get_group()))
    	utils.add_layer(candidatesLayerLine,name='NewLayer', file=self.__getStylePath('candidates.qml'), parent=get_group(), index=layerTreeIndex + 1)
    	utils.add_layer(candidatesLayerPoint,name='NewLayer', file=self.__getStylePath('candidates.qml'), parent=get_group(), index=layerTreeIndex + 1)
    	utils.add_layer(candidatesLayerPoly,name='NewLayer', file=self.__getStylePath('candidates.qml'), parent=get_group(), index=layerTreeIndex + 1)
    	utils.add_layer(finalLayer[0], file=self.__getStylePath('final.qml'), parent=get_group(), index=layerTreeIndex + 2)
    	utils.add_layer(finalLayer[1], file=self.__getStylePath('final.qml'), parent=get_group(), index=layerTreeIndex + 2)
    	utils.add_layer(finalLayer[2], file=self.__getStylePath('final.qml'), parent=get_group(), index=layerTreeIndex + 2)
    	#self.dlg.featureDetails.setText(str(candidatesLayer))
    	# candidatesLayer.featureAdded.connect(self.onCandidatesLayerFeatureChanged)
    	# candidatesLayer.featuresDeleted.connect(self.onCandidatesLayerFeatureChanged)
    	# candidatesLayer.beforeEditingStarted.connect(self.onCandidatesLayerBeforeEditingStarted)
    	# finalLayer.featureAdded.connect(self.onFinalLayerFeaturesAdded)
    	# finalLayer.featuresDeleted.connect(self.onFinalLayerFeaturesDeleted)
    	self.candidatesLayerLine = candidatesLayerLine
    	self.candidatesLayerPoint=candidatesLayerPoint
    	self.candidatesLayerPoly=candidatesLayerPoly
    	self.finalLayerLine = finalLayer[0]
    	self.finalLayerPoint=finalLayer[1]
    	self.finalLayerPolygons=finalLayer[2]

    	self.candidatesLayerLine.startEditing()
    	pr=self.candidatesLayerLine.dataProvider()
    	fields = self.currentFeature.fields()
    	pr.addAttributes(fields)
    	self.candidatesLayerLine.updateFields()
    	self.candidatesLayerLine.commitChanges()
    	self.candidatesLayerLine.updateExtents()

    	self.candidatesLayerPoint.startEditing()
    	pr=self.candidatesLayerPoint.dataProvider()
    	pr.addAttributes(fields)
    	self.candidatesLayerPoint.updateFields()
    	self.candidatesLayerPoint.commitChanges()
    	self.candidatesLayerPoint.updateExtents()

    	self.candidatesLayerPoly.startEditing()
    	pr=self.candidatesLayerPoly.dataProvider()
    	pr.addAttributes(fields)
    	self.candidatesLayerPoly.updateFields()
    	self.candidatesLayerPoly.commitChanges()
    	self.candidatesLayerPoly.updateExtents()

    	self.finalLayerPolygons.startEditing()
    	pr=self.finalLayerPolygons.dataProvider()
    	fields = self.currentFeature.fields()
    	pr.addAttributes(fields)
    	self.finalLayerPolygons.updateFields()
    	self.finalLayerPolygons.commitChanges()
    	self.finalLayerPolygons.updateExtents()

    	self.finalLayerLine.startEditing()
    	pr=self.finalLayerLine.dataProvider()
    	fields = self.currentFeature.fields()
    	pr.addAttributes(fields)
    	self.finalLayerLine.updateFields()
    	self.finalLayerLine.commitChanges()
    	self.finalLayerLine.updateExtents()

    	self.finalLayerPoint.startEditing()
    	pr=self.finalLayerPoint.dataProvider()
    	fields = self.currentFeature.fields()
    	pr.addAttributes(fields)
    	self.finalLayerPoint.updateFields()
    	self.finalLayerPoint.commitChanges()
    	self.finalLayerPoint.updateExtents()

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ShpFileCorrector/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ShpFileCorrector'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&ShpFileCorrector'),
                action)
            self.iface.removeToolBarIcon(action)


    def __getCrs(self, layer: QgsMapLayer = None) -> QgsCoordinateReferenceSystem:
        if layer:
            return layer.sourceCrs()

        return self.project.crs()

    
    
    def onAcceptedFeature(self):
    	if( not self.currentFeature in self.fList):
    		return
    	L2_feat = QgsFeature()
    	L2_feat.setGeometry(self.currentFeature.geometry())
    	L2_feat.setAttributes(self.currentFeature.attributes())
    	L2_feat.setId(self.currentFeature.id())
    	geom=self.currentFeature.geometry()
    	if geom.type()==QgsWkbTypes.PolygonGeometry:
    		self.candidatesLayerPoly.startEditing()
    		pr=self.candidatesLayerPoly.dataProvider()
    		pr.addFeatures([L2_feat])
    		self.candidatesLayerPoly.commitChanges()
    		self.candidatesLayerPoly.updateExtents()
    	if geom.type() == QgsWkbTypes.PointGeometry:
    		self.candidatesLayerPoint.startEditing()
    		pr=self.candidatesLayerPoint.dataProvider()
    		pr.addFeatures([L2_feat])
    		self.candidatesLayerPoint.commitChanges()
    		self.candidatesLayerPoint.updateExtents()
    	if geom.type()== QgsWkbTypes.LineGeometry:
    		self.candidatesLayerLine.startEditing()
    		pr=self.candidatesLayerLine.dataProvider()
    		pr.addFeatures([L2_feat])
    		self.candidatesLayerLine.commitChanges()
    		self.candidatesLayerLine.updateExtents()
    	self.fList.remove(self.currentFeature)
    	self.allf.remove(str(self.currentFeature.id())+':'+str(self.currentFeature.attributes()))
    	self.dlg.allFeatures.clear()
    	self.dlg.allFeatures.addItems(self.allf)
    	if(len(self.fList)==0):
    		self.dlg.featureDetails.setText('all features selected')
    		return
    	self.dlg.featureDetails.setText(self.all_feature_details(self.fList[0]))
    	self.currentFeature=self.fList[0]

    def addToFinalLayer(self):
    	if(len(self.fList_cand)==0):
    		self.dlg.featureDetails_2.setText('all features done')
    		return

    	if( not self.currentFeature in self.fList_cand):
    		return

    	cand=self.candidatesLayerLine
    	final=self.finalLayerLine
    	self.currentLayer=self.candidatesLayerLine
    	if self.dlg.point.isChecked()==True :
    		cand=self.candidatesLayerPoint
    		self.currentLayer=self.candidatesLayerPoint
    		final=self.finalLayerPoint
    	if self.dlg.line.isChecked()==True:
    		cand=self.candidatesLayerLine
    		final=self.finalLayerLine
    		self.currentLayer=self.candidatesLayerLine
    	if self.dlg.polygon.isChecked()==True:
    		cand=self.candidatesLayerPoly
    		final=self.candidatesLayerPoly
    		self.currentLayer=self.candidatesLayerPoly
    	

    	final.startEditing()
    	pr=final.dataProvider()

    	old=self.currentFeature
    	for feature in cand.selectedFeatures():
		    self.currentFeature=feature

    	cand.commitChanges()
    	L2_feat=QgsFeature()
    	L2_feat.setGeometry(self.currentFeature.geometry())
    	L2_feat.setAttributes(self.currentFeature.attributes())
    	L2_feat.setId(self.currentFeature.id())
    	pr.addFeatures([L2_feat])
    	final.commitChanges()
    	final.updateExtents()
    	self.fList_cand.remove(old)
    	self.allf_cand.remove(str(old.id())+':'+str(old.attributes()))

    	self.dlg.newFeatures.clear()
    	self.dlg.newFeatures.addItems(self.allf_cand)
    	self.resetRubberbands()
    	final.commitChanges()
    	
    	
    	cand.startEditing()
    	res =cand.dataProvider().deleteFeatures([old.id()])
    	cand.removeSelection()
    	if(len(self.fList_cand)==0):
    		self.dlg.featureDetails_2.setText('all features done')
    		return
    	self.dlg.featureDetails_2.setText(self.all_feature_details(self.fList_cand[0]))
    	self.currentFeature=self.fList_cand[0]
    	cand.select(self.currentFeature.id())

    def onDeletedFeature(self):
    	self.fList.remove(self.currentFeature)
    	self.allf.remove(str(self.currentFeature.id())+':'+str(self.currentFeature.attributes()))
    	self.dlg.allFeatures.clear()
    	self.dlg.allFeatures.addItems(self.allf)
    	if(len(self.fList)==0):
    		self.dlg.featureDetails.setText('all features done')
    		return
    	self.dlg.featureDetails.setText(self.all_feature_details(self.fList[0]))
    	self.currentFeature=self.fList[0]

    def on_combobox_changed(self, value):
    	if(value<0 or value>=len(self.fList)):
    		self.dlg.featureDetails.setText(str('Feature not found'))
    		return
    	self.currentFeature=self.fList[value]
    	self.dlg.featureDetails.setText(self.all_feature_details(self.fList[value]))

    def on_new_combobox_changed(self, value):
    	if(value<0 or value>=len(self.fList_cand)):
    		self.dlg.featureDetails_2.setText(str('Feature not found'))
    		return
    	self.currentFeature=self.fList_cand[value]
    	self.dlg.featureDetails_2.setText(self.all_feature_details(self.fList_cand[value]))
    	self.candidatesLayerLine.removeSelection()
    	self.candidatesLayerLine.select(self.currentFeature.id())


    def on_layer_changed(self, value):
    	self.currentLayer=self.layersList[value]

    def all_feature_details(self,feature):
    	details='ID:'+str(feature.id())+'\n'
    	geom = feature.geometry()
    	details+="Geometry:"+str(geom)+'\n'
    	geomSingleType=QgsWkbTypes.isSingleType(geom.wkbType())
    	if(geom.type()==QgsWkbTypes.PointGeometry):
    		if(geomSingleType):
    			x=geom.asPoint()
    			details+='Point:'+str(x)+'\n'
    		else:
    			x=geom.asMultiPoint()
    			details+='MultiPoint:'+str(x)+'\n'
    	elif geom.type()==QgsWkbTypes.LineGeometry:
    		if geomSingleType:
    			x=geom.asPolyline()
    			details+='Line:'+str(x)+'\n'
    			details+='Length:'+str(geom.length())+'\n'
    		else:
    			x=geom.asMultiPolyline()
    			details+='Multiline:'+str(x)+'\n'
    			details+='Length:'+str(geom.length())+'\n'
    	elif geom.type()==QgsWkbTypes.PolygonGeometry:
    		if geomSingleType:
    			x=geom.asPolygon()
    			details+='Polygon:'+str(x)+'\n'
    			details+='Area:'+str(geom.area())+'\n'
    		else:
    			x=geom.asMultiPolygon()
    			details+='Multipolygon:'+str(x)+'\n'
    			details+='Area:'+str(geom.area())+'\n'
    	else:
    		details+='Unknown or invalid Geometry'+'\n'

    	details+='Attributes:'+str(feature.attributes())
    	return details
    allf=[]
    def move_to_next_tab(self):
    	tabber=self.dlg.tabWidget
    	tabber.setTabEnabled(1,True)
    	tabber.setCurrentIndex(1)
    	x=self.dlg.comboBox.currentText()
    	thisLayer=self.layersList[self.l.index(x)]
    	#request = QgsFeatureRequest().setFilterRect(areaOfInterest)
    	i=0
    	self.allf=[]
    	self.fList=[]
    	for feature in thisLayer.getFeatures():
    		i+=1
    		self.fList.append(feature)
    		st=str(feature.id())+':'+str(feature.attributes())
    		self.allf.append(st)
    	self.dlg.allFeatures.clear()
    	self.dlg.allFeatures.addItems(self.allf)
    	self.dlg.featureDetails.setText('select feature')
    	self.dlg.allFeatures.currentIndexChanged.connect(self.on_combobox_changed)

    	self.currentFeature=self.fList[0]
    	self.create_Candidate_Layer()

    allf_cand=[]
    fList_cand=[]
    def editNewLayer(self):

    	tabber=self.dlg.tabWidget
    	tabber.setTabEnabled(2,True)
    	tabber.setCurrentIndex(2)

    	self.dlg.newFeatures.clear()
    	i=0
    	self.allf_cand=[]
    	self.fList_cand=[]
    	s=''
    	cand=self.candidatesLayerLine
    	candLayer=self.candidatesLayerLine
    		
    	self.currentLayer=self.candidatesLayerLine
    	if self.dlg.point.isChecked()==True :
    		candLayer=self.candidatesLayerPoint
    		self.currentLayer=self.candidatesLayerPoint
    	if self.dlg.line.isChecked()==True:
    		candLayer=self.candidatesLayerLine
    		self.currentLayer=self.candidatesLayerLine
    	if self.dlg.polygon.isChecked()==True:
    		candLayer=self.candidatesLayerPoly
    		self.currentLayer=self.candidatesLayerPoly
    	for feature in self.currentLayer.getFeatures():
    		i+=1
    		geom=feature.geometry()
    		self.fList_cand.append(feature)
    		st=str(feature.id())+':'+str(feature.attributes())
    		self.allf_cand.append(st)
    	if(len(self.fList_cand)==0):
    		self.dlg.featureDetails_2.setText('no feature availaible')
    		return
    	self.dlg.featureDetails_2.setText(self.all_feature_details(self.fList_cand[0]))
    	self.dlg.newFeatures.addItems(self.allf_cand)
    	self.currentFeature=self.fList_cand[0]
    	self.currentLayer.select(self.currentFeature.id())
    	self.dlg.newFeatures.currentIndexChanged.connect(self.on_new_combobox_changed)
    	self.currentLayer.startEditing()
    	self.iface.setActiveLayer(self.currentLayer)
    	self.currentLayer.removeSelection()



    def saveFinalLayer(self):
    	loc=self.dlg.finalLoc.text()
    	#QgsVectorFileWriter.writeAsVectorFormat(self.candidatesLayerLine,loc,'utf-8',None,'ESRI Shapefile')
    	crs=self.__getCrs(self.currentLayer)
    	QgsVectorFileWriter.writeAsVectorFormat(self.finalLayerLine,self.dlg.finalLoc.text()+'_Line','utf-8',crs,'ESRI Shapefile')
    	QgsVectorFileWriter.writeAsVectorFormat(self.finalLayerPoint,self.dlg.finalLoc.text()+'_Point','utf-8',crs,'ESRI Shapefile')
    	QgsVectorFileWriter.writeAsVectorFormat(self.finalLayerPolygons,self.dlg.finalLoc.text()+'_Poly','utf-8',crs,'ESRI Shapefile')
    	self.dlg.close()


    def select_output_file(self):
    	filename,_filter=QFileDialog.getSaveFileName(self.dlg,"Select output file","","*shp")
    	self.dlg.finalLoc.setText(filename)
    

    def getCordinates(self,feature):

    	geom = feature.geometry()
    	l=None
    	geomSingleType=QgsWkbTypes.isSingleType(geom.wkbType())
    	if(geom.type()==QgsWkbTypes.PointGeometry):
    		if(geomSingleType):
    			x=geom.asPoint()
    			return x
    		else:
    			x=geom.asMultiPoint()
    			return x
    	elif geom.type()==QgsWkbTypes.LineGeometry:
    		if geomSingleType:
    			x=geom.asPolyline()
    			return x
    		else:
    			x=geom.asMultiPolyline()
    			return x
    	elif geom.type()==QgsWkbTypes.PolygonGeometry:
    		if geomSingleType:
    			x=geom.asPolygon()
    			return x
    		else:
    			x=geom.asMultiPolygon()
    			return x
    	else:
    		return None
    	return None

    rubberBand = None
    vMarker = None
    crossRb = QgsRubberBand(iface.mapCanvas(),QgsWkbTypes.LineGeometry)
    crossRb.setColor(Qt.black)
    
    def resetRubberbands(self):
    	canvas = self.canvas
    	self.rubberBand.reset()
    	self.crossRb.reset()



    def editLine(self):
    	canvas=self.iface.mapCanvas()
    	currExt = canvas.extent()
    	canvasCenter = currExt.center()
    	cord=self.getCordinates(self.currentFeature)
    	if self.dlg.point.isChecked()==False:
    		self.showRect(cord[0][0],cord[0][1])
    	else:
    		self.showRect1(cord)
    	self.currentLayer.startEditing()
    	self.iface.setActiveLayer(self.currentLayer)
    	self.currentLayer.removeSelection()
    	self.currentLayer.select(self.currentFeature.id())
    	canvas.refresh()




    def showRect(self, startPoint: QgsPointXY, endPoint: QgsPointXY) -> None:
    	self.rubberBand.reset(QgsWkbTypes.PolygonGeometry)
    	x=startPoint.x();
    	y=startPoint.y()
    	a=endPoint.x()
    	b=endPoint.y()
    	if startPoint.x() == endPoint.x() :
    		x=x-y/2
    		a=a+y/2
    	if startPoint.y() == endPoint.y():
    		y=y-x/2
    		b=b+x/2
    	point1 = QgsPointXY(x,y)
    	point2 = QgsPointXY(x,b)
    	point3 = QgsPointXY(a,b)
    	point4 = QgsPointXY(a,y)
    	self.rubberBand.addPoint(point1, False)
    	self.rubberBand.addPoint(point2, False)
    	self.rubberBand.addPoint(point3, False)
    	self.rubberBand.addPoint(point4, True)
    	self.rubberBand.show()
    	# newRect = QgsRectangle(point1,point3)
    	# self.canvas.setExtent(newRect)
    	self.iface.actionZoomToSelected().trigger()
    	self.iface.actionZoomToSelected().trigger()
    def showRect1(self, startPoint: QgsPointXY) -> None:
    	self.rubberBand.reset(QgsWkbTypes.PolygonGeometry)
    	x=startPoint.x()
    	y=startPoint.y()
    	x1=x+x/2
    	y1=y+y/2
    	x2=x-x/2
    	y2=y-y/2
    	point1 = QgsPointXY(x1,y1)
    	point2 = QgsPointXY(x1,y2)
    	point3 = QgsPointXY(x2,y2)
    	point4 = QgsPointXY(x2,y1)
    	self.rubberBand.addPoint(point1, False)
    	self.rubberBand.addPoint(point2, False)
    	self.rubberBand.addPoint(point3, False)
    	self.rubberBand.addPoint(point4, True)
    	self.rubberBand.show()
    	self.iface.actionZoomToSelected().trigger()
    	self.iface.actionZoomToSelected().trigger()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ShpFileCorrectorDialog()

            self.dlg.pushButton.clicked.connect(self.select_output_file)

       	layers=self.iface.mapCanvas().layers()
       	self.dlg.comboBox.clear()
       	#self.dlg.comboBox.addItems([layer.name() for layer in layers])
       	#layer = iface.activeLayer()
       	self.l=[]
       	self.layersList=[]
       	for layer in layers:
       		if layer.type() == QgsMapLayer.VectorLayer:
       			self.l.append(layer.name())
       			self.layersList.append(layer)
       	self.dlg.comboBox.clear()
       	self.dlg.comboBox.addItems(self.l)
       	self.dlg.comboBox.currentIndexChanged.connect(self.on_layer_changed)
       	if len(self.layersList)>0:
	       	self.currentLayer=self.layersList[0]
       	tabber=self.dlg.tabWidget
       	tabber.setTabEnabled(1,False)
       	tabber.setTabEnabled(2,False)
        self.dlg.line.setChecked(True)

       	self.dlg.acceptButton.clicked.connect(self.onAcceptedFeature)
       	self.dlg.deleteButton.clicked.connect(self.onDeletedFeature)
        self.dlg.nextButton.clicked.connect(self.move_to_next_tab)
        self.dlg.editButton.clicked.connect(self.editNewLayer)
        self.dlg.Save.clicked.connect(self.saveFinalLayer)
        self.dlg.Edit.clicked.connect(self.editLine)
        self.dlg.addToFinal.clicked.connect(self.addToFinalLayer)


        self.dlg.line.toggled.connect(self.editNewLayer)
        self.dlg.line.toggled.connect(self.editNewLayer)
        self.dlg.line.toggled.connect(self.editNewLayer)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
    def __getStylePath(self,file: str)->str:
    	t=os.path.join(PLUGIN_DIR,'styles',file)
    	#self.dlg.featureDetails.setText(t)
    	return t

    def onCandidatesLayerFeatureChanged(self, featureIds: typing.Union[int, typing.List[int]]) -> None:
        assert self.candidatesLayerLine

        enable = self.candidatesLayerLine.featureCount() > 0
        return enable
        #self.dockWidget.setCandidatesButtonsEnabled(enable
    def reset(self) -> None:
    	self.startPoint = self.endPoint = None
    	self.isEmittingPoint = False
    	self.rubberBand.reset(QgsWkbTypes.PolygonGeometry)